<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    

        
        
    
    <title>Hover Layout Based on Vegetable Map</title>
</head>

<body>
    <div class="image-container">
        <img src="/lib/vegetables.jpg" alt="Vegetable Map" usemap="#vegetableMap" id="image-to-map">
        <map name="vegetableMap">
            <area shape="circle" coords="300,300,200" alt="Red" data-area="Tomato" class="area-highlight">
            <area shape="circle" coords="800,200,200" alt="Green" data-area="Lettuce" class="area-highlight">
            <area shape="circle" coords="1200,500,180" alt="Grey" data-area="Onion" class="area-highlight">
            <area shape="circle" coords="600,800,170" alt="Green" data-area="Cucumber" class="area-highlight">
            <area shape="circle" coords="1500,800,160" alt="Brown" data-area="Potato" class="area-highlight">
        </map>
        <div id="hover-tab"></div>
        <div id="vegetable-info" align="center"></div>
    </div>

    <script>
        // Selecting necessary HTML elements using their IDs and classes
        const imageContainer = document.querySelector('.image-container');
        const hoverTab = document.getElementById('hover-tab');
        const vegetableInfo = document.getElementById('vegetable-info');

        // Object or array to store vegetable information dynamically
        const vegetableData = {
            Tomato: "Tomatoes are rich in vitamins and antioxidants.",
            Lettuce: "Lettuce is a leafy green vegetable often used in salads.",
            Onion: "Onions add flavor to various dishes and come in different varieties.",
            Cucumber: "Cucumbers are low-calorie vegetables with high water content.",
            Potato: "Potatoes are versatile and can be prepared in various ways."
        };



        // Get all areas with class "area-highlight"
        const areaList = document.querySelectorAll('.area-highlight');

        // Event listener for mouse movement within the image container
        imageContainer.addEventListener('mousemove', (e) => {
            // Get the current mouse coordinates
            const mouseX = e.clientX;
            const mouseY = e.clientY;

            // Check if the mouse is over a specific area
            areaList.forEach((area) => {
                // Extracting coordinates and radius of the area
                const coords = area.coords.split(',').map(Number);
                const [x, y, radius] = coords;

                // Check if the mouse is within the circular area
                if (Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) <= Math.pow(radius, 2)) {
                    // Get area text and color
                    const areaText = area.getAttribute('data-area');
                    const areaColor = area.getAttribute('alt');

                    // Set position for the hover-tab with an offset
                    const offsetLeft = -180;
                    const offsetTop = -180;
                    hoverTab.style.left = `${mouseX + offsetLeft}px`;
                    hoverTab.style.top = `${mouseY + offsetTop}px`;

                    // Set content and style for the hover-tab
                    hoverTab.textContent = areaText;
                    hoverTab.style.backgroundColor = areaColor;
                    hoverTab.style.display = 'block';

                    // Display vegetable information with custom transition, text color, and slide-up effect
                    vegetableInfo.textContent = vegetableData[areaText] || "";
                    vegetableInfo.style.display = 'block';
                    vegetableInfo.style.opacity = '1';
                    //vegetableInfo.style.transform = 'translateY(-700px)'; // Moved this implementation on CSS
                    vegetableInfo.style.color = areaColor;
                }
            });
        });

        // Event listener to hide hover-tab and vegetable-info when the mouse is not over any area
        imageContainer.addEventListener('mouseout', () => {
            hoverTab.style.display = 'none';
            vegetableInfo.style.display = 'none';
            vegetableInfo.style.opacity = '0';
        });

    </script>
</body>

</html>
